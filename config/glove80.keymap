/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define WINDOWS 1
#define LOWER 2
#define MAGIC 3
#define FACTORY_TEST 4
#define SYMBOLS 5

// Handy diagrams borrowed from https://my.glove80.com/#/layout/user/19759528-f8df-420f-a346-31461dfbc05a
//
// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |  0  1  2  3  4         |          5  6  7  8  9 |
// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
// | 64 65 66 67 68         |         75 76 77 78 79 |
// |                69 52   |   57 74                |
// |                 70 53  |  56 73                 |
// |                  71 54 | 55 72                  |
// |------------------------|------------------------|
//
#define LEFT_HAND_KEYS      \
        0  1  2  3  4       \
        10 11 12 13 14 15   \
        22 23 24 25 26 27   \
        34 35 36 37 38 39   \
        46 47 48 49 50 51   \
        64 65 66 67 68
#define RIGHT_HAND_KEYS     \
                                        5  6  7  8  9   \
                                    16 17 18 19 20 21   \
                                    28 29 30 31 32 33   \
                                    40 41 42 43 44 45   \
                                    58 59 60 61 62 63   \
                                       75 76 77 78 79
#define THUMB_KEYS          \
                    69 52           57 74               \
                      70 53       56 73                 \
                        71 54   55 72

#define F_KEY_POS 38
#define G_KEY_POS 39
#define SPACE_KEY_POS 69

#define SPACE_SYM_LAY &symbol_ht SYMBOLS SPACE

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        symbol_ht: symbol_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_LAYER_HOLD_TAP";
            #binding-cells = <0>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Homerow Mod for the left index finger - TailorKey
        HRM_left_index_v1_TKZ: HRM_left_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left middle finger - TailorKey
        HRM_left_middy_v1_TKZ: HRM_left_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left pinky - TailorKey
        HRM_left_pinky_v1_TKZ: HRM_left_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left ring finger 1 - TailorKey
        HRM_left_ring1_v1_TKZ: HRM_left_ring1_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right index finger - TailorKey
        HRM_right_index_v1_TKZ: HRM_right_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right middle finger - TailorKey
        HRM_right_middy_v1_TKZ: HRM_right_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right pinky - TailorKey
        HRM_right_pinky_v1_TKZ: HRM_right_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right ring 1 - TailorKey
        HRM_right_ring1_v1_TKZ: HRM_right_ring1_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // combo for caps word is SPACE+f (only applicable to "base" layers)
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <SPACE_KEY_POS F_KEY_POS>;
            bindings = <&caps_word>;
            layers = <DEFAULT WINDOWS>;
        };

        // combo for caps lock is SPACE+g (since it should be used less commonly) (only applicable to "base" layers)
        combo_capslock {
            timeout-ms = <50>;
            key-positions = <SPACE_KEY_POS G_KEY_POS>;
            bindings = <&kp CAPS>;
            layers = <DEFAULT WINDOWS>;
        };
    };

    // Differences compared to default glove80 config (for typing layers):
    //  - Swapped the position of backspace and space (space is on the LH thumb cluster, backspace is on the RH thumb cluster)
    //  - Using home row mods
    //  - Changed order of layers since the default and windows layers are both "base layers" and, according to zmk docs, should have the lowest values
    //  - Added a toggle for toggling the Windows layer to the MAGIC layer (mapped to F3)
    //  - Added a hold-tap for the space key to momentarily toggle the SYMBOLS layer on hold (modified version of symbol layer from
    //      Glorious Engrammer layout (but with thumb symbols on RH since my space is on the LH) combined with a num pad on the RH)
    //  - Added layers: WINDOWS, SYMBOLS
    keymap {
        compatible = "zmk,keymap";

        // macos is the default layer (home row mods are CAGS)
        default_layer {
            bindings = <
            &kp F1         &kp F2                          &kp F3                         &kp F4                         &kp F5                                                                                                            &kp F6  &kp F7                           &kp F8                          &kp F9                                &kp F10
            &kp EQUAL      &kp N1                          &kp N2                         &kp N3                         &kp N4                          &kp N5                                                                            &kp N6  &kp N7                           &kp N8                          &kp N9                          &kp N0                                &kp MINUS
            &kp TAB        &kp Q                           &kp W                          &kp E                          &kp R                           &kp T                                                                             &kp Y   &kp U                            &kp I                           &kp O                           &kp P                                 &kp BSLH
            &kp ESC        &HRM_left_pinky_v1_TKZ LCTRL A  &HRM_left_ring1_v1_TKZ LALT S  &HRM_left_middy_v1_TKZ LGUI D  &HRM_left_index_v1_TKZ LSHFT F  &kp G                                                                             &kp H   &HRM_right_index_v1_TKZ LSHFT J  &HRM_right_middy_v1_TKZ LGUI K  &HRM_right_ring1_v1_TKZ LALT L  &HRM_right_pinky_v1_TKZ LCTRL SEMI    &kp SQT
            &kp GRAVE      &kp Z                           &kp X                          &kp C                          &kp V                           &kp B   &kp LSHFT   &kp LGUI   &layer_td  &kp LCTRL  &kp RGUI  &kp RSHFT   &kp N   &kp M                            &kp COMMA                       &kp DOT                         &kp FSLH                              &kp PG_UP
            &magic MAGIC 0 &kp HOME                        &kp END                        &kp LEFT                       &kp RIGHT                               SPACE_SYM_LAY &kp DEL    &kp LALT   &kp RALT   &kp RET   &kp BSPC            &kp UP                           &kp DOWN                        &kp LBKT                        &kp RBKT                              &kp PG_DN
            >;
        };

        // windows-specific typing layer (home row mods are GACS)
        windows_layer {
            bindings = <
            &kp F1         &kp F2                          &kp F3                         &kp F4                         &kp F5                                                                                                            &kp F6                           &kp F7                          &kp F8                          &kp F9                                &kp F10
            &kp EQUAL      &kp N1                          &kp N2                         &kp N3                         &kp N4                          &kp N5                                                                            &kp N6  &kp N7                           &kp N8                          &kp N9                          &kp N0                                &kp MINUS
            &kp TAB        &kp Q                           &kp W                          &kp E                          &kp R                           &kp T                                                                             &kp Y   &kp U                            &kp I                           &kp O                           &kp P                                 &kp BSLH
            &kp ESC        &HRM_left_pinky_v1_TKZ LGUI A  &HRM_left_ring1_v1_TKZ LALT S  &HRM_left_middy_v1_TKZ LCTRL D  &HRM_left_index_v1_TKZ LSHFT F  &kp G                                                                             &kp H   &HRM_right_index_v1_TKZ LSHFT J  &HRM_right_middy_v1_TKZ LCTRL K  &HRM_right_ring1_v1_TKZ LALT L  &HRM_right_pinky_v1_TKZ LGUI SEMI    &kp SQT
            &kp GRAVE      &kp Z                           &kp X                          &kp C                          &kp V                           &kp B   &kp LSHFT   &kp LGUI   &layer_td  &kp LCTRL  &kp RGUI   &kp RSHFT   &kp N   &kp M                            &kp COMMA                       &kp DOT                         &kp FSLH                              &kp PG_UP
            &magic MAGIC 0 &kp HOME                        &kp END                        &kp LEFT                       &kp RIGHT                               SPACE_SYM_LAY &kp DEL    &kp LALT   &kp RALT   &kp RET    &kp BSPC            &kp UP                           &kp DOWN                        &kp LBKT                        &kp RBKT                              &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &tog WINDOWS    &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };

        symbol_layer {
            bindings = <
            &none           &none         &none        &none         &none          &none                                                                             &none    &none     &none    &none         &none
            &kp GRAVE       &kp RBKT      &kp LS(N9)   &kp LS(N0)    &kp COMMA      &kp DOT                                                               &kp LBKT    &kp RBKT &kp EQUAL &kp FSLH &kp LS(8)     &none
            &kp LBKT        &kp LS(N1)    &kp LS(LBKT) &kp LS(RBKT)  &kp SEMI       &kp LS(FSLH)                                                          &kp GRAVE   &kp N7   &kp N8    &kp N9   &kp MINUS     &kp ESC
            &kp LS(N3)      &kp LS(N6)    &kp EQUAL    &kp LS(MINUS) &kp LS(N4)     &kp LS(N8)                                                            &kp LS(SQT) &kp N4   &kp N5    &kp N6   &kp LS(EQUAL) &kp TAB
            &kp LS(GRAVE)   &kp LS(COMMA) &kp LS(BSLH) &kp MINUS     &kp LS(DOT)    &kp FSLH     &none &none &none    &kp LS(N8) &kp DOT      &kp BSLH    &kp SQT     &kp N1   &kp N2    &kp N3   &kp LS(N9)    &kp LS(N0)
            &tog SYMBOLS    &kp LS(N7)    &kp SQT      &kp LS(SQT)   &kp LS(EQUAL)               &none &none &none    &kp LS(N2) &kp LS(SEMI) &kp LS(N5)              &kp N0   &kp N0    &kp DOT  &kp LS(LBKT)  &kp LS(RBKT)
            >;
        };
    };
};
